{"version":3,"sources":["images/GT.png","images/Duke.png","images/Pitt.png","images/FSU.png","images/Miami.png","images/VT.png","images/UVA.png","images/UNC.png","images/BC.png","images/Clemson.png","images/NCSU.png","images/Cuse.png","images/WF.png","images/Ville.png","images/ND.png","components/College/index.js","components/Navbar/index.js","components/ScoreBoard/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","College","props","react_default","a","createElement","className","id","name","onClick","checkClick","alt","src","image","Navbar","ScoreBoard","score","colleges","require","clicked","App","state","clickedArray","console","log","_this","includes","setState","shuffleColleges","push","i","length","j","Math","floor","random","shuffleArray","college","_this2","this","components_Navbar","components_ScoreBoard","map","components_College","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2310a0fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GT.567058ae.png\";","module.exports = __webpack_public_path__ + \"static/media/Duke.a6c0ec13.png\";","module.exports = __webpack_public_path__ + \"static/media/Pitt.1d84fae0.png\";","module.exports = __webpack_public_path__ + \"static/media/FSU.2197f4b1.png\";","module.exports = __webpack_public_path__ + \"static/media/Miami.b3d6452e.png\";","module.exports = __webpack_public_path__ + \"static/media/VT.0deb810f.png\";","module.exports = __webpack_public_path__ + \"static/media/UVA.83b867fe.png\";","module.exports = __webpack_public_path__ + \"static/media/UNC.e98159fb.png\";","module.exports = __webpack_public_path__ + \"static/media/BC.7d5f7b53.png\";","module.exports = __webpack_public_path__ + \"static/media/Clemson.c5bb047a.png\";","module.exports = __webpack_public_path__ + \"static/media/NCSU.aacbecae.png\";","module.exports = __webpack_public_path__ + \"static/media/Cuse.eeb843e7.png\";","module.exports = __webpack_public_path__ + \"static/media/WF.439530ae.png\";","module.exports = __webpack_public_path__ + \"static/media/Ville.5c8945cf.png\";","module.exports = __webpack_public_path__ + \"static/media/ND.37d5f225.png\";","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction College(props) {\n  return (\n    <div className=\"card d-flex justify-content-center\" id={props.name} onClick={() => props.checkClick(props.id)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div >\n\n  );\n}\n\nexport default College;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar() {\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-light bg-light justify-content-center\">\r\n            <span className=\"navbar-brand h1\" id=\"top\"><strong>College Click Challenge: ACC Edition</strong></span>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction ScoreBoard(props) {\r\n  return (\r\n    <div className=\"row d-flex justify-content-center\">\r\n      <div className=\"col-12 d-flex justify-content-center\">\r\n        <div className=\"scoreboard justify-content-center align-middle\">\r\n          <div className=\"row justify-content-center\">\r\n            <div className=\"col-8\"><h1 className=\"scores\">Score:</h1></div>\r\n            <div className=\"col-4\"><h1 className=\"score\">{props.score}</h1></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default ScoreBoard;\r\n","import React, { Component } from 'react';\nimport College from \"./components/College\";\nimport Navbar from \"./components/Navbar\";\nimport ScoreBoard from \"./components/ScoreBoard\";\n// import colleges from \"./college.json\";\n\nimport './App.css';\n// import { partition } from 'rxjs';\n\n\n// Use 'require' in order to serve local images\nconst colleges = [\n  {\n    \"id\": 1,\n    \"name\": \"GeorgiaTech\",\n    \"image\": require(\"./images/GT.png\"),\n    \"clicked\": false\n  },\n\n  {\n    \"id\": 2,\n    \"name\": \"Duke\",\n    \"image\": require(\"./images/Duke.png\"),\n    \"clicked\": false\n  },\n\n  {\n    \"id\": 3,\n    \"name\": \"Pitt\",\n    \"image\": require(\"./images/Pitt.png\"),\n    \"clicked\": false\n  },\n\n  {\n    \"id\": 4,\n    \"name\": \"FSU\",\n    \"image\": require(\"./images/FSU.png\"),\n    \"clicked\": false\n  },\n\n  {\n    \"id\": 5,\n    \"name\": \"Miami\",\n    \"image\": require(\"./images/Miami.png\"),\n    \"clicked\": false\n  },\n\n  {\n    \"id\": 6,\n    \"name\": \"VirginiaTech\",\n    \"image\": require(\"./images/VT.png\"),\n    \"clicked\": false\n  },\n\n  {\n    \"id\": 7,\n    \"name\": \"Virginia\",\n    \"image\": require(\"./images/UVA.png\"),\n    \"clicked\": false\n  },\n\n  {\n    \"id\": 8,\n    \"name\": \"UNC\",\n    \"image\": require(\"./images/UNC.png\"),\n    \"clicked\": false\n  },\n\n  {\n    \"id\": 9,\n    \"name\": \"BostonCollege\",\n    \"image\": require(\"./images/BC.png\"),\n    \"clicked\": false\n  },\n\n  {\n    \"id\": 10,\n    \"name\": \"Clemson\",\n    \"image\": require(\"./images/Clemson.png\"),\n    \"clicked\": false\n  },\n\n  {\n    \"id\": 11,\n    \"name\": \"NCSU\",\n    \"image\": require(\"./images/NCSU.png\"),\n    \"clicked\": false\n  },\n\n  {\n    \"id\": 12,\n    \"name\": \"Syracuse\",\n    \"image\": require(\"./images/Cuse.png\"),\n    \"clicked\": false\n  },\n\n  {\n    \"id\": 13,\n    \"name\": \"WakeForest\",\n    \"image\": require(\"./images/WF.png\"),\n    \"clicked\": false\n  },\n\n  {\n    \"id\": 14,\n    \"name\": \"Louisville\",\n    \"image\": require(\"./images/Ville.png\"),\n    \"clicked\": false\n  },\n\n  {\n    \"id\": 15,\n    \"name\": \"NotreDame\",\n    \"image\": require(\"./images/ND.png\"),\n    \"clicked\": false\n  }\n\n]\nclass App extends Component {\n\n  state = {\n    colleges,\n    score: 0\n  };\n\n  //Create an empty that will contain the ID of all of the cards that are clicked.  \n  //As each card is clicked, the array is checked to see if that ID was already clicked.\n  //if the array contains that ID, then the game is over.  If the array does not contain the ID, we push the ID to the array.\n  clickedArray = []\n\n  checkClick = (id) => {\n    console.log(\"clickedArray:\",this.clickedArray)\n    console.log(\"id\",id)\n    if (this.clickedArray.includes(id)) {\n      //GAME OVER\n      console.log(\"GAME OVER!\")\n      //Reset the Score to 0\n      this.setState({ score: this.state.score = 0})\n      //Empty the clickedArray since a new game will be started\n      this.clickedArray = []\n      //Shuffle the Colleges and Rerender them for a new game\n      this.shuffleColleges();\n    }\n\n    else {\n      console.log(\"This wasn't clicked yet\")\n      //The clicked ID wasn't in the array, so we'll push it to the array.\n      this.clickedArray.push(id)\n      console.log(\"Updated clickedArray:\",this.clickedArray)\n      //Increment the Score\n      this.setState({ score: this.state.score + 1 });\n      //Reshuffle the cards and render for the next guess\n      this.shuffleColleges()\n      \n      console.log(\"Now clicked is:\", this.state.id)\n    }\n\n  }\n\n  shuffleColleges = () => {\n\n    let colleges = this.state.colleges\n\n    for (let i = colleges.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let shuffleArray = colleges[i];\n      colleges[i] = colleges[j];\n      colleges[j] = shuffleArray;\n    }\n    \n    this.setState({ college: colleges })\n\n  }\n\n  render() {\n    return (\n      <div className=\"justify-content-center\">\n        <Navbar />\n        <ScoreBoard\n          score={this.state.score}\n        />\n        <div className=\"wrapper justify-content-center\">\n          {this.state.colleges.map(colleges => (\n            <College\n              id={colleges.id}\n              name={colleges.name}\n              image={colleges.image}\n              clicked={colleges.clicked}\n              checkClick={this.checkClick}\n            />\n          ))}\n\n        </div>\n      </div>\n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}